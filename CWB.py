# CWB.py
# allows calling of CyberWorkBench functions from python scripts
# 
# List of Functions:
# CWB.bdlpars(design_name)
# CWB.bdltran_gen_fcnt(design_name)
# CWB.bdltran(design_name)
# CWB.get_results_str(design_name)

import os
import pdb

suppress_bdl = True #flag to suppress bdl output

def bdlpars(design_name="sobel"):
	''' run the bdlpars command from the system terminal
		place results in the <design_name>/run folder
	'''

	run_path = design_name + "/run"
	
	bdlpars_str =  "bdlpars -EE  -I./"+design_name+" -I../.. -I/proj/cad/cwb-6.1/linux_x86_64/include -o " + run_path + "/" + design_name + ".IFF -info_base_name " + run_path + "/" + design_name + " \"" + design_name + "/" + design_name + ".c\""

	os.system(r"mkdir " + design_name + "/run > misc_err.log 2> misc_err.log")
	if(suppress_bdl): bdlpars_out_target = " > " + run_path + "/bdlpars.log 2> " + run_path + "/bdlpars.errlog"
	else: bdlpars_out_target = ""
	os.system(bdlpars_str + bdlpars_out_target)




def bdltran_gen_fcnt(design_name="sobel", fcnt_limits=(0,0,0)):
	'''creates the .FCNT file for a design
	'''
	run_path = design_name + "/run"
	FCNT_option = " -Zflib_out_limit=L" + str(fcnt_limits[0]) + ":M" + str(fcnt_limits[1]) + ":S" + str(fcnt_limits[2])
	if(fcnt_limits[0] == 0): #no constraint
		FCNT_option = ""
	output_IFF = " " + run_path + "/" + design_name + ".IFF"
	clk = "1000"
	
	bdltran_fcnt_gen = "bdltran  -EE   -c"+clk+" -s  -Zflib_fcnt_out -Zresource_fcnt=GENERATE " + FCNT_option + " -Zresource_mcnt=GENERATE -Zdup_reset=YES -Zfolding_sharing=inter_stage -EE -lb /proj/cad/cwb-6.1/packages/asic_90.BLIB -lfl /proj/cad/cwb-6.1/packages/asic_90.FLIB " + output_IFF 

	if(suppress_bdl): bdltran_out_target = " > " + run_path + "/bdltran_fcnt.log 2> " + run_path + "/bdltran_fcnt.errlog"
	else : bdltran_out_target = ""
	os.system(bdltran_fcnt_gen + bdltran_out_target)



def bdltran(design_name="sobel", extra_options=""):
	''' run the bdltran command from the system terminal
		place results in the <design_name>/run folder
	'''

	run_path = design_name + "/run"
	FCNT_specification = " -lfc " + run_path + "/" + design_name + "-auto.FCNT "
	FLIB_specification = " +lfl " + run_path + "/" + design_name + "-auto.FLIB "
	output_IFF = " " + run_path + "/" + design_name + ".IFF"
	clk = "1000"
	
	bdltran_str = "bdltran  -EE   -c"+clk+" -s -Zresource_fcnt=USE " + " -Zresource_mcnt=GENERATE -Zdup_reset=YES -Zfolding_sharing=inter_stage  -lb /proj/cad/cwb-6.1/packages/asic_90.BLIB -lfl /proj/cad/cwb-6.1/packages/asic_90.FLIB " + FLIB_specification + FCNT_specification + " " + extra_options + " " + output_IFF 

	if(suppress_bdl): bdltran_out_target = " > " + run_path + "/bdltran.log 2> " + run_path + "/bdltran.errlog"
	else: bdltran_out_target = ""
	os.system(bdltran_str + bdltran_out_target)

def get_results_str(design_name="sobel", method="EXH", iteration=1, attr=0):
	''' returns a string formatted for the DSEframe
		which are the results located in the .CSV file generated by CWB
	'''
	CSV = open(design_name + "/run/" + design_name + ".CSV")
	titles = CSV.readline()
	values = CSV.readline()
	results = method + "," + str(iteration) + "," + str(attr) + "," 
	if(len(values) != 0):
		results += values
	else: results = ""
	return results
	
